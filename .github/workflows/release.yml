name: Release

on:
  push:
    branches:
      - master

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if release needed
        id: check_release
        run: |
          VERSION=$(uv run semantic-release version --print)
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "next_version=$VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          if [ "$VERSION" != "$CURRENT_VERSION" ]; then
            echo "release_needed=true" >> $GITHUB_OUTPUT
          else
            echo "release_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build package
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          uv build

      - name: Create Release
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          uv run semantic-release version
          uv run semantic-release changelog
          uv run semantic-release publish

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.check_release.outputs.release_needed == 'true'
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Push changes
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          git push
          git push --tags
